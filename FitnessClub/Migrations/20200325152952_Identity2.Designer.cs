// <auto-generated />
using System;
using FitnessClub.Data.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace FitnessClub.Migrations
{
    [DbContext(typeof(FCContext))]
    [Migration("20200325152952_Identity2")]
    partial class Identity2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("FitnessClub.Data.Models.Address", b =>
                {
                    b.Property<int>("AddressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<string>("Region")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<string>("ZipCode")
                        .HasColumnType("text");

                    b.HasKey("AddressID");

                    b.HasIndex("PersonID");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.CoachRating", b =>
                {
                    b.Property<int>("CoachRatingID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CoachPersonID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.HasKey("CoachRatingID");

                    b.HasIndex("CoachPersonID");

                    b.ToTable("CoachRatings");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Holiday", b =>
                {
                    b.Property<int>("HolidayID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("EmployeePersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("HolidayID");

                    b.HasIndex("EmployeePersonID");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Membership", b =>
                {
                    b.Property<int>("MembershipID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CustomerPersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("MembershipNo")
                        .HasColumnType("integer");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("MembershipID");

                    b.HasIndex("CustomerPersonID");

                    b.ToTable("Memberships");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Person", b =>
                {
                    b.Property<int>("PersonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<int?>("Gender")
                        .HasColumnType("integer");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("PersonID");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Person");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Session", b =>
                {
                    b.Property<int>("SessionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("CoachPersonID")
                        .HasColumnType("integer");

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<DateTime>("Finish")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int>("Room")
                        .HasColumnType("integer");

                    b.Property<int?>("SessionType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Start")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SessionID");

                    b.HasIndex("CoachPersonID");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.SessionEnrollment", b =>
                {
                    b.Property<int>("SessionEnrollmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("CreatedBy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp without time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<int?>("CustomerPersonID")
                        .HasColumnType("integer");

                    b.Property<int?>("PersonID")
                        .HasColumnType("integer");

                    b.Property<int?>("SessionID")
                        .HasColumnType("integer");

                    b.HasKey("SessionEnrollmentID");

                    b.HasIndex("CustomerPersonID");

                    b.HasIndex("SessionID");

                    b.ToTable("SessionEnrollments");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Customer", b =>
                {
                    b.HasBaseType("FitnessClub.Data.Models.Person");

                    b.Property<int?>("PersonID1")
                        .HasColumnType("integer");

                    b.HasIndex("PersonID1");

                    b.HasDiscriminator().HasValue("Customer");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Employee", b =>
                {
                    b.HasBaseType("FitnessClub.Data.Models.Person");

                    b.Property<int?>("PersonID1")
                        .HasColumnName("Employee_PersonID1")
                        .HasColumnType("integer");

                    b.HasIndex("PersonID1");

                    b.HasDiscriminator().HasValue("Employee");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Coach", b =>
                {
                    b.HasBaseType("FitnessClub.Data.Models.Employee");

                    b.Property<int?>("EmployeePersonID")
                        .HasColumnType("integer");

                    b.HasIndex("EmployeePersonID");

                    b.HasDiscriminator().HasValue("Coach");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Address", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessClub.Data.Models.CoachRating", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Coach", "Coach")
                        .WithMany("CoachRatings")
                        .HasForeignKey("CoachPersonID");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Holiday", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Employee", "Employee")
                        .WithMany("Holidays")
                        .HasForeignKey("EmployeePersonID");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetRoleClaim", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Identity.AspNetRole", "AspNetRole")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserClaim", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Identity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserLogin", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Identity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserRole", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Identity.AspNetRole", "AspNetRole")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FitnessClub.Data.Models.Identity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Identity.AspNetUserToken", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Identity.AspNetUser", "AspNetUser")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Membership", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Customer", "Customer")
                        .WithMany("Memberships")
                        .HasForeignKey("CustomerPersonID");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Session", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Coach", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachPersonID");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.SessionEnrollment", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Customer", "Customer")
                        .WithMany("SessionEnrollments")
                        .HasForeignKey("CustomerPersonID");

                    b.HasOne("FitnessClub.Data.Models.Session", "Session")
                        .WithMany("SessionEnrollments")
                        .HasForeignKey("SessionID");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Customer", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID1");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Employee", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonID1");
                });

            modelBuilder.Entity("FitnessClub.Data.Models.Coach", b =>
                {
                    b.HasOne("FitnessClub.Data.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeePersonID");
                });
#pragma warning restore 612, 618
        }
    }
}
